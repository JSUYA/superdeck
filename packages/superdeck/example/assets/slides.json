[
  {
    "title": "Slide 1: Headings",
    "layout": "two_column_header",
    "image": {
      "fit": "cover",
      "src": "https://source.unsplash.com/random/900×700/?landscape"
    },
    "background": "https://source.unsplash.com/random/900×700/?landscape",
    "variant": "simple",
    "content_alignment": "top_left",
    "content": "# Heading 1\n## Heading 2\n### Heading 3\n::left::\n#### Heading 4\n##### Heading 5\n###### Heading 6\n::right::\n**Paragraph**\n\nHere is a paragraph with some text."
  },
  {
    "title": "Slide 2: Text Styling",
    "content": "**Bold Text**\n\n*Italic Text*\n\n~~Strikethrough~~\n\n`Inline Code`"
  },
  {
    "title": "Slide 3: Links and Images",
    "content": "[Link](https://github.com)\n\n![Unsplash Image](https://source.unsplash.com/random/300x200/?landscape#500x250)"
  },
  {
    "title": "Slide 4: Quotes",
    "content": "> This is a blockquote.\n\n> This is the first line of a blockquote.\n>\n>  This is the second paragraph within the same blockquote.\n\n> #### This is a Header inside a Blockquote"
  },
  {
    "title": "Slide 5: Code Blocks",
    "content": "```dart {1, 3-8}\nint factorial(int n) {\n  if (n == 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```"
  },
  {
    "title": "Slide 6: Lists",
    "content": "1. Ordered list item 1\n2. Ordered list item 2\n\n- Unordered list item 1\n- Unordered list item 2"
  },
  {
    "title": "Slide 7: Tables",
    "content": "| Header 1 | Header 2 |\n|----------|----------|\n| Cell 1A  | Cell 1B  |\n| Cell 2A  | Cell 2B  |"
  },
  {
    "title": "Mermaid example",
    "content": "![Mermaid Diagram](assets/images/523883852.png)"
  },
  {
    "title": "Slide 8: Task Lists",
    "layout": "two-column",
    "content": "::left::\n\n- [ ] Task List Item 1\n- [x] Task List Item 2\n\n::right::\n\n#### Subtask\n\n- [x] foo\n  - [ ] bar\n  - [x] baz\n- [ ] bim"
  },
  {
    "title": "Dividers",
    "content": "_____\nDividers\n____"
  },
  {
    "title": "Code rendering performance",
    "content": "```dart\nclass SyntaxTags {\n  const SyntaxTags._();\n  static final left = '::left::';\n  static final right = '::right::';\n  static final content = '::content::';\n}\n\nMap<String, List<String>> parseContentWithTags(\n    String input, List<String> tags) {\n  final Map<String, List<String>> parsedContent = {};\n  int lastTagEndIndex = 0;\n  String currentTag = SyntaxTags.content;\n\n  for (int i = 0; i < input.length; i++) {\n    for (String tag in tags) {\n      if (input.substring(i).startsWith(tag)) {\n        // Add the content before this tag to the list\n        final content = input.substring(lastTagEndIndex, i).trim();\n        if (content.isNotEmpty) {\n          parsedContent.putIfAbsent(currentTag, () => []).add(content);\n        }\n\n        // Update the current tag and last tag end index\n        currentTag = tag;\n        lastTagEndIndex = i + tag.length;\n\n        // Skip the characters of this tag\n        i += tag.length - 1;\n        break;\n      }\n    }\n  }\n\n  // Add remaining content if any\n  if (lastTagEndIndex < input.length) {\n    final content = input.substring(lastTagEndIndex).trim();\n    if (content.isNotEmpty) {\n      parsedContent.putIfAbsent(currentTag, () => []).add(content);\n    }\n  }\n\n  return parsedContent;\n}\n```"
  }
]